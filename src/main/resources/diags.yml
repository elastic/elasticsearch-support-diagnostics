#
#  The REST call settings have been moved to elastic-rest.yml and logstash-rest.yml
#

## Should only need to change if Github modifies something
  ##   diagHost: "https://api.github.com"
  ##   diagQuery: "/repos/elastic/support-diagnostics/releases/latest"

# Colon is the standard field delimiter for all concatentated strings containing
# urls, credentials etc. If that creates a password conflict you may change it.
# The modified value will be used for ALL concatenated string inputs.
field-delimiter: ":"

# Maximum number of log files including zip archives
log-settings:
  maxLogs: 3
  maxGcLogs: 3

rest-config:
   # timeouts in seconds
   # timeout when requesting a connection from the connection manager
   requestTimeout: 30
   # timeout in milliseconds until a connection is established. A timeout value of zero is interpreted as an infinite timeout. This parameter expects a value of type java.lang.Integer. If this parameter is not set, connect operations will not time out (infinite timeout).
   connectTimeout: 30
   # defines the socket timeout (SO_TIMEOUT) in milliseconds, which is the timeout for waiting for data or, put differently, a maximum period inactivity between two consecutive data packets). A timeout value of zero is interpreted as an infinite timeout. This parameter expects a value of type java.lang.Integer. If this parameter is not set, read operations will not time out (infinite timeout).
   socketTimeout:  30

   # times in milliseconds
   # Threshold to check for expired connections
   idleExpire:     100

   # For HTTP Client connection pool manager. Shouldn't need adjustment
   # Total connections allowed
   maxTotalConn: 100
   # Nbr connections for a particular HTTP route.
   maxConnPerRoute: 10

# Rest call retry settings
# Number of tiems to re-attempt a rest call if enabled
call-retries: 3

# Time before re-attempts in milliseconnds
pause-retries: 5000

# System calls executed when running locally. Grouped by operating system.
thread-dump:
  jstack: "jstack {{PID}}"

linuxOS:
  sys:
    top: "top -b -n1"
    netstat: "netstat -an"
    ss: "ss -an"
    process-list: "ps -ef"
    top_threads: "top -b -n1 -H"
    uname: "uname -a -r"
    cpu: "cat /proc/cpuinfo"
    iostat: "iostat -c -d -x -t -m 1 5"
    sar: "sar -A"
    sysctl: "sysctl -a"
    dmesg: "dmesg"
    huge_pages: "cat /sys/kernel/mm/transparent_hugepage/enabled"
    cpu_governor: "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"
    limits: "cat /etc/security/limits.conf"
    proc-limit: "cat /proc/{{PID}}/limits"

  java:
    elastic-java: "ps -fp {{PID}} | awk '{ if (NR!=1) print $8}'"
    jps: "{{JAVA_HOME}}/bin/jps -l -m -v"
    jstack: "{{JAVA_HOME}}/bin/jstack {{PID}}"
    javac: "{{JAVA_HOME}}/bin/javac -version"

  logs:
    elastic: "ls -alt {{LOGPATH}} | grep '{{CLUSTERNAME}}.log' | awk '{print $9}'"
    elastic-arc: "ls -alt {{LOGPATH}} | grep '{{CLUSTERNAME}}-.*-1.log.gz' | awk '{print $9}'"
    gc: "ls -alt {{LOGPATH}} |  awk '/gc/ {print $9}'"
    kibana: "ls -alt /var/log/kibana/ |  awk '/.json|.log/ {print $9}'"
    kibana-default-path: "/var/log/kibana/"

macOS:
  sys:
    top: "top -l 1"
    netstat: "netstat -an"
    process-list: "ps -ef"
    ulimit: "ulimit -a"

  java:
    elastic-java: "ps -fp {{PID}} | awk '{ if (NR!=1) print $8}'"
    jps: "{{JAVA_HOME}}/bin/jps -l -m -v"
    jstack: "{{JAVA_HOME}}/bin/jstack {{PID}}"
    javac: "{{JAVA_HOME}}/bin/javac -version"

  logs:
    elastic: "ls -alt {{LOGPATH}} | grep '{{CLUSTERNAME}}.log' | awk '{print $9}'"
    elastic-arc: "ls -alt {{LOGPATH}} | grep '{{CLUSTERNAME}}-.*-1.log.gz' | awk '{print $9}'"
    gc: "ls -alt {{LOGPATH}} |  awk '/gc/ {print $9}'"
    kibana: "ls -alt /var/log/kibana/ |  awk '/.json|.log/ {print $9}'"
    kibana-default-path: "/var/log/kibana/"

winOS:
  sys:
    process-list: "tasklist /v"
    netstat: "netstat -ano"
    cpu: "wmic CPU"

  java:
    elastic-java: "wmic process where processId={{PID}} GET CommandLine"
    jps: "{{JAVA_HOME}}\\bin\\jps -l -m -v"
    jstack: "{{JAVA_HOME}}\\bin\\jstack {{PID}}"
    javac: "{{JAVA_HOME}}\\bin\\javac -version"

  logs:
    elastic: "dir /b  /l /o:-d /a:-d {{LOGPATH}}\\{{CLUSTERNAME}}.log"
    elastic-arc: "dir /b  /l /o:-d /a:-d {{LOGPATH}}\\{{CLUSTERNAME}}-*.log.gz"
    gc: "dir /l /b /o:-d /a:-d {{LOGPATH}}\\gc.log.*"

# Docker specific calls for querying containers
docker-container-ids: "{{dockerPath}} ps -q"

docker-global:
  docker-info: "bash -c '{{dockerPath}} info'"
  docker-ps-all: "bash -c '{{dockerPath}} ps -a --no-trunc'"

docker-container:
  docker-logs: "{{dockerPath}} logs {{CONTAINER_ID}}"
  docker-top: "{{dockerPath}} top {{CONTAINER_ID}}"
  docker-inspect: "{{dockerPath}} inspect {{CONTAINER_ID}}"

# Monitoring export/import settings
# Retrieval settings for scroll
monitoring-scroll-size: 1000

# Bulk ingestion size for monitoring import
bulk-import-size: 500
# If failure encountered, how long to wait before retrying
bulk-pause: 15000
# Number of retries before continuing
bulk-max-retries: 3

# Stored in resources/monitoring-extract
import-templates:
  - "monitoring-es-diag"
  - "monitoring-logstash-diag"
  - "metricbeat-system-diag"

# Naming templates for imported indices
elastic-pattern: ".monitoring-es-7-diag-import"
logstash-pattern: ".monitoring-logstash-7-diag-import"
metricbeat-pattern: "metricbeat-7-diag-import"

# extractions that we want to insert into the
# imported index.
query-files:
  - general
  - index_stats
  - index_all
  - cluster_id_check
  - cluster_ids
  - metricbeat

monitor-sets:
  - cluster_state
  - cluster_stats
  - node_stats
  - indices_stats
  - index_stats
  - shards
  - job_stats
  - ccr_stats
  - ccr_auto_follow_stats

logstash-sets:
  - logstash_stats
  - logstash_state

# areas to extract from
metric-sets:
  - cpu
  - load
  - memory
  #- network
  #- process
  #- process_summary
  #- socket_summary
  #- entropy
  - core
  - diskio
  #- socket
  #- service
  #- users

