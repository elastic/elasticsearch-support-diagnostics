#
#
#
#
#  The REST call settings have been moved to elastic-rest.yml and logstash-rest.yml
#
#
#
#
# REST timeout settings - note:values are in second

github-settings:
  diagReleaseHost: "api.github.com"
  diagReleaseDest: "/repos/elastic/support-diagnostics/releases/latest"
  diagReleaseScheme: "https"
  diagLatestRelease: "https://api.github.com/repos/elastic/support-diagnostics/releases/latest"

log-settings:
  maxLogs: 2
  maxGcLogs: 3

# Uncomment only if modifying defaults
rest-config:
   # timeouts in seconds
   requestTimeout: 60
   connectTimeout: 60
   socketTimeout:  120
   maxTotalConn: 100
   maxConnPerRoute: 10

# Number of tiems to re-attempt a rest call
call-retries: 3

# Time before re-attempts in milliseconnds
pause-retries: 5000

thread-dump:
  jstack: "jstack PID"

linuxOS:
  sys:
    top: "top -b -n1"
    netstat: "netstat -an"
    ss: "ss -an"
    process-list: "ps -ef"
    top_threads: "top -b -n1 -H"
    uname: "uname -a -r"
    cpu: "cat /proc/cpuinfo"
    iostat: "iostat -c -d -x -t -m 1 5"
    sar: "sar -A"
    sysctl: "sysctl -a"
    dmesg: "dmesg"
    huge_pages: "cat /sys/kernel/mm/transparent_hugepage/enabled"
    cpu_governor: "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"
    limits: "cat /etc/security/limits.conf"
    proc-limit: "cat /proc/PID/limits"
  es:
    elastic-process: "ps ax"
  java:
    jps: "JAVA_HOME/bin/jps -l -m -v"
    jstack: "JAVA_HOME/bin/jstack PID"

macOS:
  sys:
    top: "top -l 1"
    netstat: "netstat -an"
    process-list: "ps ax"
    ulimit: "ulimit -a"
  es:
    elastic-process: "ps ax"
  java:
    jps: "JAVA_HOME/bin/jps -l -m -v"
    jstack: "JAVA_HOME/bin/jstack PID"

winOS:
  sys:
    process-list: "tasklist /v"
    netstat: "netstat -ano"
    cpu: "wmic CPU"
  es:
    process: "wmic process where name='java.exe'"
  java:
    jps: "JAVA_HOME\\bin\\jps -l -m -v"
    jstack: "JAVA_HOME\\bin\\jstack PID"

docker-global:
  docker-info: "docker info"
  docker-ps-all: "docker ps -a --no-trunc"

# This looks a little weird, but we have to tokenize 2x, once for the
# part that would normally be in single quotes and contains spaces and
# once for the space separate first section. Due to quirks in how the
# Java Processbuilder works.
docker-containers:
  docker-ulimit: "docker exec -i CONTAINER_ID bash -c ;; ulimit -a"
  docker-internal-top: "docker exec -i CONTAINER_ID bash -c ;; top -b -n1"
  docker-uname: "docker exec -i CONTAINER_ID bash -c ;; uname -a -r"
  docker-top-threads: "docker exec -i CONTAINER_ID bash -c ;; top -b -n1 -H"
  docker-process-list: "docker exec -i CONTAINER_ID bash -c ;; ps -ef"
  docker-cpu-info: "docker exec -i CONTAINER_ID bash -c ;; cat /proc/cpuinfo"
  docker-sysctl: "docker exec -i CONTAINER_ID bash -c ;; sysctl -a"
  docker-logs: "docker logs CONTAINER_ID"
  docker-top: "docker top CONTAINER_ID"

monitoring-stats:
  - cluster_stats
  - node_stats
  - indices_stats
  - index_stats
  - shards
  - job_stats
  - ccr_stats
  - ccr_auto_follow_stats

monitoring-queryfiles:
  general: "general.json"
  index_stats: "index_stats.json"
  index_all: "index_all.json"
  cluster_id_check: "cluster_id_check.json"
  cluster_ids: "cluster_ids.json"

monitoring-queries:
  monitoring-uri:
    versions:
      "< 7.0.0": "/.monitoring-es*/_search"
      ">= 7.0.0": "/.monitoring-es*/_search?rest_total_hits_as_int=true"

  monitoring-start-scroll-uri:
    versions:
      "< 7.0.0":  "/.monitoring-es*/_search?scroll=2m"
      ">= 7.0.0": "/.monitoring-es*/_search?scroll=2m&rest_total_hits_as_int=true"

  monitoring-scroll-uri:
    versions:
      "< 7.0.0":  "/_search/scroll?scroll=2m"
      ">= 7.0.0": "/_search/scroll?scroll=2m&rest_total_hits_as_int=true"

monitoring-scroll-size: 500
default-monitoring-index: ".monitoring-es-7"

bulk-import-size: 250
